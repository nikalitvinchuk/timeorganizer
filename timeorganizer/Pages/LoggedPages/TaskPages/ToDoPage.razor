@page "/todo"
@using timeorganizer.Services
@using timeorganizer.Helpers

<div class="container">
    <div>
        <h2> Zadania</h2><button @onclick="@(e => Przenies(0))">Dodaj zadanie</button>
@inject ToDoService taskService
@inject NavigationManager NavigationManager
<div style="display: grid; grid-template-columns: auto 1fr;" class="d-flex flex-row">

    <div style="grid-row: 3; grid-column: 1;">
        <label>Typ</label>
        <input @bind="@taskService.showTask.Typ" />
    </div>
            <div style="grid-row: 4; grid-column: 1;">
                <label>Status zadania</label>
                <InputSelect @bind-Value="taskService.showTask.Status">
                    @foreach (var status in taskService.showTask.StatusStr) {
                        <option value="@status">@status</option>
                    }
                </InputSelect>
            </div>
    <div style="grid-row: 5; grid-column: 1;">
        <label>Data</label>
        <InputDate Type="InputDateType.Date" class="form-eliment jds-d-inline-block jds-max-width150" @bind-Value="taskService.showTask.TerminD"> </InputDate>
    </div>
</div>

        <button @onclick="@filterTask" style="margin: 10px auto; display: block;">Filtruj</button>
  
        @foreach (var task in taskService.showTask.TasksCollection) {
    <div class="d-flex flex-row border p-2" style="cursor: pointer;">
        <p class="mr-3 mb-0">@task.Name</p>
        <p class="mr-3 mb-0">@task.Description</p>
        <p class="mr-3 mb-0">@task.Type</p>
        <p class="mr-3 mb-0">@task.Status</p>
        <p class="mr-3 mb-0">@task.Termin</p>
        <button @onclick="@(e => RedirectToDetails(@task.Id))">Szczegóły zadania</button>
    </div>
}
        @code {
            private async void RedirectToDetails(int taskId) {
                taskService.AddSTask.TaskId = taskId;
                await taskService.AddSTask.GetTask();
                NavigationManager.NavigateTo("/subtask");
            }
            private void Przenies(int typ){
                NavigationManager.NavigateTo("/addtask");
            }
        }

        <a href="/" class="button">Wróć</a>
    </div>
</div>
@code{
    
    protected override void OnAfterRender(bool firstRender){
        if (firstRender){
            filterTask();
            StateHasChanged();
        }
    }
    public async void filterTask() {
        await taskService.showTask.FilterTasks();
        StateHasChanged();
    }
    public async void refreshOnAddTask(){
        await taskService.addTask.AddTask();
        await taskService.showTask.FilterTasks();
        StateHasChanged();
    }
   
}