@page "/addtask"
@using timeorganizer.Services
@using timeorganizer.Helpers

@inject ToDoService taskService
@inject NavigationManager NavigationManager
<div class="container">
    <div class="row">
        <div class="col-md-6 offset-md-3">
            <label class="form-label">Podaj tytuł swojego zadania</label>
            <input class="form-control" @bind="@taskService.addTask.Name" placeholder="Np. Nauka Języka Angielskiego" />

            <label class="form-label mt-3">Opisz swoje zadania</label>
            <input class="form-control" @bind="@taskService.addTask.Description" placeholder="Określ konkrety, które chcesz zrealizować." />

            <label class="form-label mt-3">Określ typ zadania</label>
            <InputSelect @bind-Value="taskService.addTask.Typ" class="form-control">
                @foreach (var status in taskService.addTask.TypList) {
                    <option value="@status.Name">@status.Name</option>
                }
            </InputSelect>

            <label class="form-label mt-3">Podaj Termin wykonania zadania</label>
            <InputDate Type="InputDateType.Date" class="form-eliment jds-d-inline-block jds-max-width150" @bind-Value="taskService.addTask.Termin" style="width: 100%; height: 40px;"> </InputDate>
            <button class="btn btn-primary mt-3" @onclick="@AddT">Utwórz zadanie</button>
            <button class="btn btn-primary mt-3" @onclick="@Powroc">Powrót</button>

        </div>
    </div>
</div>

@code {
    protected override async void OnAfterRender(bool firstRender) {
        if (firstRender) {
            await taskService.addTask.GetList();
            StateHasChanged();
        }
    }
    public async void AddT() {
            await taskService.addTask.AddTask();
            await taskService.showTask.FilterTasks();
            StateHasChanged();
    }
    private void Powroc() {
        NavigationManager.NavigateTo("/todo");
    }
}


