@page "/subtask"
@using timeorganizer.DatabaseModels
@using timeorganizer.Services
@using timeorganizer.Helpers

<div class="container">
<h1>Szczegóły</h1>

@inject NavigationManager NavigationManager
@inject ToDoService taskService
@if (taskService.AddSTask.OTask.Status == "Aktywne") {
    <button class="btn btn-primary mt-3" @onclick="@MoveToAddTC">Dodaj Etapy Zadania</button>
    <button class="btn btn-primary mt-3" @onclick="@(e => MoveToEdit(@taskService.AddSTask.OTask.Id, 0))">Edytuj zadanie</button>
    <button class="btn btn-primary mt-3" @onclick="@(e => FinaMainTask())">Ukończ zadanie</button>
}
<button class="btn btn-primary mt-3" @onclick="@Powroc">Powrót</button>
<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Description</th>
            <th>Type</th>
            <th>Status</th>-->
            <th>Termin</th>
            <th>% ukończenia</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>@taskService.AddSTask.OTask.Name</td>
            <td>@taskService.AddSTask.OTask.Description</td>
            <td>@taskService.AddSTask.OTask.Type</td>
            <td>@taskService.AddSTask.OTask.Status</td>
            <td>@taskService.AddSTask.OTask.Termin</td>
            <td>@taskService.AddSTask.OTask.RealizedPercent %</td>
         </tr>
    </tbody>
</table>
<table>
    <thead>
        <tr>
            <th>Name</th>
            <th>Description</th>
            <th>Type</th>
            <th>Status</th>
        </tr>
    </thead>

@foreach (var subTasks in taskService.AddSTask.TComponent) {

    <tbody>
        <tr>
            <td>@subTasks.Name</td>
            <td>@subTasks.Description</td>
            <td>@subTasks.TaskId</td>
            <td>@subTasks.Status</td>
                    @if (taskService.AddSTask.OTask.Status != "Ukończono" && subTasks.Status != "Ukończono") {
                    <td><button class="btn btn-primary mt-3" @onclick="@(e => MoveToEdit(@subTasks.Id, 1))">Edytuj Etap</button></td>
                    <td><button class="btn btn-primary mt-3" @onclick="@(e => FinaComponent(@subTasks))">Ukończ</button></td>
                    }
        </tr>

    </tbody>
}
</table>
</div>


@code {
    protected override async void OnAfterRender(bool firstRender) {
        if (firstRender) {
            await taskService.EditTask.UpdateRealized(@taskService.AddSTask.OTask.Id);
            await taskService.AddSTask.GetTask();
            StateHasChanged();
        }
    } 

    public void MoveToAddTC() {
        NavigationManager.NavigateTo("/addtaskcom");
        StateHasChanged();
    }

    public async void MoveToEdit(int tid, int typ) {
        taskService.EditTask.typ = typ;
        await taskService.EditTask.GetTask(tid);
        NavigationManager.NavigateTo("/edittask");
        StateHasChanged();
    }

    private async void FinaMainTask() {
        await taskService.EditTask.CheckFinComp(@taskService.AddSTask.OTask);
    }

    private async void FinaComponent<TTable>(TTable Component ) where TTable : class, new() {
        if(@taskService.AddSTask.OTask.Status != "Ukończono") {
            (Component as dynamic).Status = "Ukończono";
            if (await SubTasks() == 0)
            {
                (Component as dynamic).RealizedPercent = 100;
            }

            await taskService.EditTask.Update(Component);

            await taskService.EditTask.UpdateRealized((Component as dynamic).TaskId);
            await taskService.AddSTask.GetTask();
            StateHasChanged();
        }
    }

    private void Powroc() {
        NavigationManager.NavigateTo("/todo");
    }
    private async Task<int> SubTasks()
    {
        return await taskService.showTask.GetSubTaskCount(@taskService.AddSTask.OTask.Id);
    }
}



