@page "/"
@using timeorganizer.Services
@* @using System.Windows.Maui.Controls; // biblioteka odpowiadająca za utworzenie diagramu kołowego *@
@inject AuthServiceSetUser service
@if (service.CurrentUser.Identity.IsAuthenticated)
{
    // ZALOGOWANY
    <div id="container" >
        <div>
        @inject ToDoService taskService
        @inject StatisticService Statistic
        @inject NavigationManager NavigationManager
            
            <h2> Witaj!</h2>
            <p>Postęp</p>
            <div class="progress" role="progressbar" aria-label="Basic example" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100">

                <div class="progress-bar bg-primary" style="width: @Statistic.ComplitedPrecent;">Ukończone zadania: @Statistic.Realized</div>
            </div>
            
            <h3>Aktualne zadania</h3>
          

            @foreach (var task in taskService.showTask.TasksCollection)
            {
                <div class="task-tile">
                    <p class="task-title">@task.Name</p>
                    <p class="task-description">@task.Description</p>
                    <div class="task-details">
                        <p class="task-type">Typ: @task.Type</p>
                        <p class="task-due-date">Termin: @task.Termin</p>
                        <p class="task-progress">Realizacja: @task.RealizedPercent%</p>
                    </div>
                    <button @onclick="@(e => RedirectToDetails(@task.Id))" class="buttondetails">Szczegóły zadania</button>
                </div>
                @code {
            private async void RedirectToDetails(int taskId)
            {
                taskService.AddSTask.TaskId = taskId;
                await taskService.AddSTask.GetTask();
                NavigationManager.NavigateTo("/subtask");
            }
            private void Przenies()
            {
                NavigationManager.NavigateTo("/addtask");
            }
        }
}
            @code {
            protected override void OnAfterRender(bool firstRender)
            {
                taskService.showTask.Status = "Aktywne";
                if (firstRender)
                {

                    filterTask();
                    GetStatistic();
                    StateHasChanged();
                }
            }
            public async void filterTask()
            {
                await taskService.showTask.FilterTasks();
                StateHasChanged();
            }
            public async void GetStatistic()
            {
                await Statistic.GetUserRealizedTasks();
            }
        }

            
            @* <p> diagram kołowy</p>
            <StackLayout>
    <ChartView>
        <PieChart>
            <PieSeries ItemsSource="{Binding Data}" x:Name="pieSeries" ValueBinding="Value" ColorBinding="Color"/>
        </PieChart>
    </ChartView>
</StackLayout>

@code {
    public List<DataPoint> Data { get; set; }

    protected override void OnInitialized()
    {
        Data = new List<DataPoint>
        {
            new DataPoint { Value = 30, Color = Color.Blue, Label = "Category 1" },
            new DataPoint { Value = 20, Color = Color.Red, Label = "Category 2" },
            new DataPoint { Value = 50, Color = Color.Green, Label = "Category 3" }
        };
    }

    public class DataPoint
    {
        public double Value { get; set; }
        public Color Color { get; set; }
        public string Label { get; set; }
    }
} *@
            
        </div>
    </div>
}
else
{
    // NIEZALOGOWANY
	<div id="container">
        <img src="vizualization2.png">

		<a href="login" class="buttongl">LOGIN</a>
		<a href="register" class="buttongl" id="buttonsignup">SIGN UP</a> <br/>
        <div class="container-fluid">
            <img src="instagram_icon.png" @* style="width: 100px; height: 100px; margin-left: 10px;" *@ /><a href="https://www.instagram.com/"><br>odwiedź nasz instagram</a>
        </div>
	</div>
}

