@page "/"
@using timeorganizer.Services
@* @using System.Windows.Maui.Controls; // biblioteka odpowiadająca za utworzenie diagramu kołowego *@
@inject AuthServiceSetUser service

@if (service.CurrentUser.Identity.IsAuthenticated)
{
    // ZALOGOWANY
    <div id="container">
        <div>
        @inject ToDoService taskService
        @inject NavigationManager NavigationManager
            
            <h2> Witaj!</h2>
            <p>Postęp</p>
            <div class="progress">
                
                <div class="progress-bar bg-secondary" style="width:70%">Ukończone zadania</div>
            </div>

            <p>Aktualne zadania</p>
            

            @foreach (var task in taskService.showTask.TasksCollection)
            {
                <div class="d-flex flex-row border p-2" style="cursor: pointer;">
                    <p class="mr-3 mb-0">@task.Name</p>
                    <p class="mr-3 mb-0">@task.Description</p>
                    <p class="mr-3 mb-0">@task.Type</p>
                    @* <p class="mr-3 mb-0">@task.status</p> *@
                    <p class="mr-3 mb-0">@task.Termin</p>
                    <p class="mr-3 mb-0">@task.RealizedPercent</p>
                    <button @onclick="@(e => RedirectToDetails(@task.Id))">Szczegóły zadania</button>
                </div>
                @code {
            private async void RedirectToDetails(int taskId)
            {
                taskService.AddSTask.TaskId = taskId;
                await taskService.AddSTask.GetTask();
                NavigationManager.NavigateTo("/subtask");
            }
            private void Przenies()
            {
                NavigationManager.NavigateTo("/addtask");
            }
        }
}
            @code {
            protected override void OnAfterRender(bool firstRender)
            {
                taskService.showTask.Status = "Aktywne";
                if (firstRender)
                {
                    filterTask();
                    StateHasChanged();
                }
            }
            public async void filterTask()
            {
                await taskService.showTask.FilterTasks();
                StateHasChanged();
            }
        }

            
            @* <p> diagram kołowy</p>
            <StackLayout>
    <ChartView>
        <PieChart>
            <PieSeries ItemsSource="{Binding Data}" x:Name="pieSeries" ValueBinding="Value" ColorBinding="Color"/>
        </PieChart>
    </ChartView>
</StackLayout>

@code {
    public List<DataPoint> Data { get; set; }

    protected override void OnInitialized()
    {
        Data = new List<DataPoint>
        {
            new DataPoint { Value = 30, Color = Color.Blue, Label = "Category 1" },
            new DataPoint { Value = 20, Color = Color.Red, Label = "Category 2" },
            new DataPoint { Value = 50, Color = Color.Green, Label = "Category 3" }
        };
    }

    public class DataPoint
    {
        public double Value { get; set; }
        public Color Color { get; set; }
        public string Label { get; set; }
    }
} *@
            
        </div>
    </div>
}
else
{
    // NIEZALOGOWANY
	<div id="container">
		<a href="login" class="button">Logowanie</a>
		<a href="register" class="button">Rejestracja</a>

	</div>
}

